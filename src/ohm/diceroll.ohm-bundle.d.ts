// AUTOGENERATED FILE
// This file was generated from diceroll.ohm by `ohm generateBundles`.

import {
  ActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface DicerollActionDict<T> extends ActionDict<T> {
  Expr?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  DicerollToken?: (this: NonterminalNode, arg0: TerminalNode) => T;
  ExprSumInfix_Add?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExprSumInfix_Subtract?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExprSumInfix?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExprProductInfix_Multiply?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExprProductInfix_FloorDivide?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExprProductInfix_Divide?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExprProductInfix?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  PowerOfInfixOp?: (this: NonterminalNode, arg0: TerminalNode) => T;
  ExprPowerOfInfix_PowerOf?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  ExprPowerOfInfix?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExprRollInfix_Dice?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode) => T;
  ExprRollInfix?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ExprPriority_Paren?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  ExprPriority_RollPrefix?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  ExprPriority_PosPrefix?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  ExprPriority_NegPrefix?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  ExprPriority?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Literal_Variable?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  Literal_number?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Literal?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  variable_ident?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  variable_ident_char?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  number_fract?: (this: NonterminalNode, arg0: IterationNode, arg1: TerminalNode, arg2: IterationNode) => T;
  number_whole?: (this: NonterminalNode, arg0: IterationNode) => T;
  number?: (this: NonterminalNode, arg0: NonterminalNode) => T;
}

export interface DicerollSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: DicerollActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: DicerollActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: DicerollActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: DicerollActionDict<T>): this;
}

export interface DicerollGrammar extends Grammar {
  createSemantics(): DicerollSemantics;
  extendSemantics(superSemantics: DicerollSemantics): DicerollSemantics;
}

declare const grammar: DicerollGrammar;
export default grammar;

